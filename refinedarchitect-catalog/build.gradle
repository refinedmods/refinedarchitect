plugins {
    id 'version-catalog'
}

catalog {
    versionCatalog {
        // Use the same slf4j API as MC to not break logging in the development environment.
        def slf4j = version("slf4j", "2.0.1")
        library("slf4j-api", "org.slf4j", "slf4j-api").versionRef(slf4j)
        library("slf4j-impl", "org.slf4j", "slf4j-simple").versionRef(slf4j)

        def mixin = version("mixin", "0.8.4")
        library("mixin", "org.spongepowered", "mixin").versionRef(mixin)
        plugin("mixin", "org.spongepowered.gradle.vanilla").version("0.2.1-SNAPSHOT")

        plugin("pitest", "info.solidsoft.pitest").version("1.9.11")
        version("pitest", "1.10.4")
        version("pitestJUnit5Plugin", "1.1.2")

        plugin("sonarqube", "org.sonarqube").version("3.3")

        version("checkstyle", "10.6.0")

        def apiGuardian = version("apiGuardian", "1.1.2")
        library("apiguardian", "org.apiguardian", "apiguardian-api").versionRef(apiGuardian)

        def jsr305 = version("jsr305", "3.0.2")
        library("jsr305", "com.google.code.findbugs", "jsr305").versionRef(jsr305)

        def junit5 = version("junit5", "5.9.2")
        library("junit-api", "org.junit.jupiter", "junit-jupiter-api").versionRef(junit5)
        library("junit-engine", "org.junit.jupiter", "junit-jupiter-engine").versionRef(junit5)
        library("junit-params", "org.junit.jupiter", "junit-jupiter-params").versionRef(junit5)

        def assertJ = version("assertJ", "3.24.1")
        library("assertj", "org.assertj", "assertj-core").versionRef(assertJ)

        def mockito = version("mockito", "5.0.0")
        library("mockito", "org.mockito", "mockito-core").versionRef(mockito)

        def equalsVerifier = version("equalsverifier", "3.12.3")
        library("equalsverifier", "nl.jqno.equalsverifier", "equalsverifier").versionRef(equalsVerifier)
    }
}

publishing {
    publications {
        create("maven", MavenPublication) {
            from(components.versionCatalog)
        }
    }
}