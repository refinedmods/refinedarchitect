buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'Forge'
            url = 'https://maven.minecraftforge.net'
        }
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
        maven {
            name = 'CurseForgeGradle'
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.9.11'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:4.2.1.3168'
        classpath 'org.spongepowered:vanillagradle:0.2.1-SNAPSHOT'
        classpath 'net.minecraftforge.gradle:ForgeGradle:[6.0,6.2)'
        classpath 'fabric-loom:fabric-loom.gradle.plugin:1.2-SNAPSHOT'
        classpath 'net.darkhax.curseforgegradle:CurseForgeGradle:1.1.15'
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
    apply plugin: 'jacoco'

    version = '0.0.0'

    if (System.getenv('GITHUB_SHA') != null) {
        version += '+' + System.getenv('GITHUB_SHA').substring(0, 7)
    }

    if (System.getenv('RELEASE_VERSION') != null) {
        version = System.getenv('RELEASE_VERSION')
    }

    apply plugin: 'java'
    java.toolchain.languageVersion = JavaLanguageVersion.of(17)

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release.set(17)
        it.options.deprecation = true
        it.options.compilerArgs << "-Xmaxerrs" << "999"
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation "com.google.code.findbugs:jsr305:3.0.2"
    }

    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion = "10.6.0"
    }

    processResources {
        inputs.property 'version', project.version

        filesMatching(['fabric.mod.json', 'META-INF/mods.toml']) {
            expand 'version': project.version
        }
    }

    ext {
        minecraftVersion = "1.20.1"
        forgeVersion = "47.0.35"
        fabricLoaderVersion = "0.14.21"
        fabricApiVersion = "0.85.0+1.20.1"
        // https://www.curseforge.com/minecraft/mc-mods/jei/files
        jeiVersion = "15.2.0.22"
        // https://www.curseforge.com/minecraft/mc-mods/roughly-enough-items/files
        reiVersion = "12.0.626"
        architecturyVersion = "8.1.73" // dependency of rei
        clothMathVersion = "0.6.1" // dependency of rei
        clothConfigVersion = "10.0.96" // dependency of rei
    }

    ext.enableMutationTesting = {
        apply plugin: info.solidsoft.gradle.pitest.PitestPlugin
        pitest {
            junit5PluginVersion = "1.1.2"
            pitestVersion = "1.10.4"
            outputFormats.set(['HTML'])
            mutationThreshold.set(90)
            coverageThreshold.set(80)
        }
    }

    ext.enableJavadoc = {
        ext.javadocEnabled = true
    }

    apply plugin: 'maven-publish'
    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/" + System.getenv("GITHUB_REPOSITORY"))
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
            maven {
                name = "CreeperHost"
                url = uri("https://maven.creeperhost.net/release")
                credentials {
                    username = System.getenv("CREEPERHOST_MAVEN_USERNAME")
                    password = System.getenv("CREEPERHOST_MAVEN_TOKEN")
                }
            }
        }
    }
    ext.enablePublishing = {
        publishing {
            publications {
                gpr(MavenPublication) {
                    from(components.java)
                }
            }
        }
    }

    ext.enableCurseForge = { int projectId ->
        task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
            apiToken = System.getenv("CURSEFORGE_TOKEN")
            def mainFile = upload(projectId, jar)
            mainFile.releaseType = project.version.toString().contains('beta') ? 'beta' : (project.version.toString().contains('alpha') ? 'alpha' : 'release')
            mainFile.changelog = System.getenv("RELEASE_CHANGELOG")
            mainFile.changelogType = 'markdown'
            mainFile.displayName = 'v' + System.getenv('RELEASE_VERSION')
        }
    }

    ext.commonProject = {
        apply plugin: org.spongepowered.gradle.vanilla.VanillaGradle
        minecraft {
            version(minecraftVersion)
        }
        sourceSets {
            main.resources.srcDirs += 'src/generated/resources'
        }
        dependencies {
            compileOnly "org.spongepowered:mixin:0.8.4"
        }
    }

    ext.forgeProject = { String modId, Project commonProject = null, ArrayList apis = [], ArrayList compileApis = [] ->
        apply plugin: net.minecraftforge.gradle.userdev.UserDevPlugin
        minecraft {
            mappings channel: 'official', version: minecraftVersion
            accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
            runs {
                client {
                    workingDirectory project.file('run')
                    ideaModule "${rootProject.name}.${project.name}.main"
                    taskName 'Client'
                    mods {
                        modClientRun {
                            source sourceSets.main
                            apis.collect {
                                source(project(it).sourceSets.main)
                            }
                            compileApis.collect {
                                source(project(it).sourceSets.main)
                            }
                            if (commonProject != null) {
                                source(commonProject.sourceSets.main)
                            }
                        }
                    }
                }
                server {
                    workingDirectory project.file('run')
                    ideaModule "${rootProject.name}.${project.name}.main"
                    taskName 'Server'
                    mods {
                        modServerRun {
                            source sourceSets.main
                            apis.collect {
                                source(project(it).sourceSets.main)
                            }
                            compileApis.collect {
                                source(project(it).sourceSets.main)
                            }
                            if (commonProject != null) {
                                source(commonProject.sourceSets.main)
                            }
                        }
                    }
                }
                data {
                    var destinationProject = commonProject != null ? commonProject : project
                    var existingProject = commonProject != null ? commonProject : project
                    args '--mod', modId, '--all', '--output', destinationProject.file('src/generated/resources'), "--existing", existingProject.file('src/main/resources')
                    ideaModule "${rootProject.name}.${project.name}.main"
                    taskName 'Data'
                }
            }
        }
        dependencies {
            minecraft "net.minecraftforge:forge:${minecraftVersion}-${forgeVersion}"
            apis.collect {
                implementation project(it)
            }
            compileApis.collect {
                implementation project(it)
            }
            if (commonProject != null) {
                implementation commonProject
            }
        }
        sourceSets {
            main.resources.srcDirs += 'src/generated/resources'
        }
        processResources {
            if (commonProject != null) {
                from commonProject.sourceSets.main.resources
            }
            from project.sourceSets.main.resources
        }
        tasks.withType(JavaCompile) {
            apis.collect {
                source(project(it).sourceSets.main.allSource)
            }
            compileApis.collect {
                source(project(it).sourceSets.main.allSource)
            }
            if (commonProject != null) {
                source(commonProject.sourceSets.main.allSource)
            }
        }
        jar.finalizedBy('reobfJar')
    }

    ext.fabricProject = { String modId, Project commonProject = null, ArrayList apis = [], ArrayList compileApis = [] ->
        repositories {
            maven {
                name = 'Parchment'
                url 'https://maven.parchmentmc.org'
            }
        }
        apply plugin: net.fabricmc.loom.bootstrap.LoomGradlePluginBootstrap
        dependencies {
            minecraft "com.mojang:minecraft:${minecraftVersion}"
            mappings loom.layered() {
                officialMojangMappings()
                parchment("org.parchmentmc.data:parchment-1.19.3:2023.03.12@zip")
            }
            modImplementation "net.fabricmc:fabric-loader:${fabricLoaderVersion}"
            modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricApiVersion}"
            apis.collect {
                implementation project(it)
                include project(it)
            }
            compileApis.collect {
                implementation project(it)
            }
            if (commonProject != null) {
                implementation commonProject
            }
        }
        processResources {
            if (commonProject != null) {
                from commonProject.sourceSets.main.resources
            }
            from project.sourceSets.main.resources
        }
        tasks.withType(JavaCompile) {
            compileApis.collect {
                source(project(it).sourceSets.main.allSource)
            }
            if (commonProject != null) {
                source(commonProject.sourceSets.main.allSource)
            }
        }
        jar {
            from '../LICENSE.md'
        }
        loom {
            def accessWidenerFile = file("src/main/resources/${modId}.accesswidener")
            if (accessWidenerFile.exists()) {
                accessWidenerPath = accessWidenerFile
            }
            runs {
                client {
                    client()
                    setConfigName("Fabric Client")
                    ideConfigGenerated(true)
                    runDir("run")
                }
                server {
                    server()
                    setConfigName("Fabric Server")
                    ideConfigGenerated(true)
                    runDir("run")
                }
            }
            mixin {
                showMessageTypes = true
                messages {
                    // silence the warning from shadowing a synthetic field
                    TARGET_ELEMENT_NOT_FOUND = 'disabled'
                }
            }
        }
    }
}

tasks.register('allJavadoc', Javadoc) {
    def projects = allprojects.stream().filter { p -> p.hasProperty('javadocEnabled') }.toList()
    source projects*.sourceSets.main.allJava
    classpath += files(projects*.sourceSets.main.compileClasspath)
    destinationDir = file("build/docs/javadoc")
}

// https://web.archive.org/web/20200206112725/http://csiebler.github.io/blog/2014/02/09/multi-project-code-coverage-using-gradle-and-jacoco/
tasks.register('codeCoverageReport', JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    subprojects.each {
        sourceSets it.sourceSets.main
    }
    reports {
        html.required = true
        xml.required = true
    }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}

ext.enableSonarQube = (String projectKey, String organization = "refinedmods") -> {
    apply plugin: org.sonarqube.gradle.SonarQubePlugin
    // https://docs.sonarqube.org/latest/analysis/github-integration/
    sonarqube {
        properties {
            property "sonar.projectKey", projectKey
            property "sonar.organization", organization
            property "sonar.host.url", "https://sonarcloud.io"
            property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
        }
    }
}